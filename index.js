// import os from "os";
//  import  {coreTwo}  from "./coreTwo.js";
// import { readFileSync, writeFileSync, existsSync } from "fs";
// import { join } from "path";

// console.log(os.arch());

/* // Вызываем глобальный объект process, который предоставляет методы и свойства для контроля процесса выполнения Node.js.
process.stdin
  // Обращаемся к свойству stdin, которое представляет собой стандартный поток ввода - это поток, на котором можно производить чтение данных из командной строки.
  .on(
    "data",
    // Обработчик on устанавливает событие, которое происходит, когда данные поступают в стандартный поток ввода.
    (d) => {
      // Создаем переменную data, которая будет содержать данные, полученные из стандартного потока ввода.
      const data = d.toString();
      // Выводим полученные данные в консоль.
      console.log("ВЫ ввели --->", data);
      // Разбиваем полученные данные на массив строк, используя пробел в качестве разделителя.
      const str = data.split(' ');
      // Вызываем функцию coreTwo, передавая ей первое число, оператор и второе число в качестве аргументов.
      console.log("Калькулятор --->", coreTwo(Number(str[0]), str[1], Number(str[2])));
    }
  );

// 'data' - это событие, которое происходит, когда данные поступают в стандартный поток ввода.
// (d) - это колбэк функция, которая будет вызвана при возникновении события 'data'. Она принимает параметр d, который содержит полученные данные в виде буфера.
// const data = d.toString(); - преобразуем полученные данные в строку и сохраняем их в переменную data. Это необходимо для дальнейшей обработки данных.
// const str = data.split(' '); - разбиваем полученные данные на массив строк, используя пробел в качестве разделителя.
// coreTwo(Number(str[0]), str[1], Number(str[2])) - вызываем функцию coreTwo, передавая ей первое число, оператор и второе число в качестве аргументов. Результат вычислений выводится в консоль.

// process.stdout
// process.stderr  */

/* process.stdin.on("data", (d) => {
  const data = d.toString();
  const str = data.split(' ');
  console.log("ВЫ ввели --->", data);
  console.log("Калькулятор --->", coreTwo(Number(str[0]), str[1], Number(str[2])));
});
console.log(coreTwo);  */

//  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/* // Считываем содержимое файла "coreTwo.js" и сохраняем его в переменной file1.{ encoding: 'utf8' } - это опция для метода readFileSync, которая указывает, что нужно считать содержимое файла в кодировке UTF-8. Это делается для того, чтобы правильно интерпретировать символы в файле, которые могут быть нестандартными для других кодировок.
const file1 = readFileSync('coreTwo.js', { encoding: 'utf8' });

// Выводим содержимое файла на консоль.
console.log(file1);


// Модуль existsSync является частью стандартной библиотеки Node.js и предоставляет функционал для проверки существования файла или директории. Метод existsSync принимает в качестве аргумента путь к файлу или директории и возвращает true, если файл или директория существуют, и false, если они не существуют.
// Проверяем, существует ли файл "coreTwo.js"
if (existsSync('coreTwo.js')) {
  // Если файл существует, выводим сообщение об этом
  console.log("Файл coreTwo.js существует!!!!!");
} else {
  // Если файл не существует, создаем новый файл "coreTwo.js" с содержимым из переменной file1
  writeFileSync('coreTwo.js', file1);
} */

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* //  `process.cwd()` возвращает текущую рабочую директорию Node.js процесса. 
//.cwd() является методом объекта `process`, который представляет собой глобальный объект, доступный в любом модуле Node.js. 
console.log(process.cwd()); */

/* 
//  чтобы нам сделать правильный путь до нашего файла , нам нужно воспользоваться  join 
// у нас есть наименивание папки  join(process.cwd(),  а после запятой пишем наименование какого-то файла 
console.log(join(process.cwd(), "coreTwo.js")); */